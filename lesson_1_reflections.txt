How did viewing a diff between two versions of a file help you see the bug that was introduced?
It helps by displaying the difference in two codes and let us know whether its a typo, some changes in the two codes which is setting one apart from the other in terms of output. And so all that has been changed from older version to newer version can be seen in a transparent manner.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
Because when you code you might find some of the earlier versions of the code more efficient than the ones you developed lately and you don't need to worry about carry the drag of history manually. A large project needs project to be saved on a daily basis and as a different file so in order to backtrack to an earlier created file could be restored.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
Pros and cons of manually choosing when to create a  commit come with a wise decision of what you want to be stored in a separate version of your file. Suppose if you are too afraid of data loss while working on a project and you want to create checkpoint every change you make, then it might create a whole bunch of history log where there is a large amount of files saved over a very short period of time created irrespective of logical change or typo. Whereas if you make changes considering the type of changes which may be typo or logical. if you create a feature then it might require various logical coding intellects which means more than one logic goes into creating that single feature, so in order to create a record of how the feature was actually built, it would be wise creating sufficient amount of commits for it. So even if theres a point in time where our particular logic failed to deliver a desired result. It can be improved without affecting other logics as well. Similarly if you commit various typos in a file at once, It won't be a big issue as they are most unlikely to have separate commits for them. So pros and cons depends on how wisely you understand the point of creating a version of your file.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
Git allows saving multiple files in one commit considering the fact that your file maybe interrelated and the change in one file might affect the others as well. So it has repository of such files which allows the files that are related to each other have there newer versions created on commit in the updated repository accumulating all the changes made across these files in a repository. Whereas GoogleDocs treats each file separately considering the fact that there might be cases where in a repository only one file is changed and others are still as they were in previous versions, and it would lead to creation of similar copies of same files across multiple repository versions. This number can increase if only that single file needs to changed every time. So they both considered different scenarios in saving multiple files in one commit.

How can you use the commands git log and git diff to view the history of files?
The two commands are very useful resources when it comes to view and compare previous and current versions of files. We can use git log to get the history of commits done on the repository entirely and there is a message indicating what was done in that particular commit making it more helpful. Then you can use git diff to compare the changes made between any two commits using their ids, number of lines added or deleted, what are these lines, any typos or bug fixed.

How might using version control make you more confident to make changes that could break something?
Version control creates log of all the commits made on a repository recording the changes in each commit. Even if a bug is introduced unknowingly in our code we can use git -diff to compare and rectify what bug made the code work the way it wasn't intended. git -log help us to rectify the buggy commit. So it rules out the fear of having a messy code at the end of our project.

Now that you have your workspace set up, what do you want to try using Git for?
I am gonna use it for version control of my various projects which I earlier developed with a lot of fear of messing up the code at some stage. I no need to consider code as my king, as it is my friend from now and I can play with it the way I want to.